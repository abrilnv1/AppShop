{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet CartComponent = class CartComponent {\n  constructor(storeService, paymentService) {\n    this.storeService = storeService;\n    this.paymentService = paymentService;\n    this.myCart$ = this.storeService.myCart$;\n    this.viewCart = false;\n    this.showPaymentForm = false; // Nuevo estado para mostrar/ocultar el formulario de pago\n    this.paymentInfo = {\n      name: '',\n      email: '',\n      phone: ''\n    };\n  }\n  updateUnits(operation, id) {}\n  totalProduct(price, units) {\n    return price * units;\n  }\n  deleteProduct(id) {}\n  totalCart() {\n    // Asumiendo que `this.storeService.totalCart()` calcula el total y siempre retorna un número.\n    return this.storeService.totalCart();\n  }\n  proceedToPayment() {\n    // Cambio: En lugar de directamente generar el link de pago,\n    // ahora mostramos el formulario de pago para que el usuario pueda introducir información adicional\n    this.showPaymentForm = true;\n  }\n  submitPaymentInfo() {\n    const total = this.totalCart(); // Obtenemos el total del carrito\n    // Aquí, incluimos la información adicional en la solicitud al servicio de pago\n    this.paymentService.createPaymentLink({\n      ...this.paymentInfo,\n      amount: total // Añadimos el total del carrito\n    }).subscribe({\n      next: response => {\n        // Manejar la respuesta, por ejemplo, abriendo el link de pago para el usuario\n        window.open(response.paymentLink, '_blank');\n        this.showPaymentForm = false; // Ocultamos el formulario después de enviar la información\n      },\n\n      error: error => {\n        console.error('Error al crear el link de pago:', error);\n        // Aquí podrías manejar el error, posiblemente mostrando un mensaje al usuario\n      }\n    });\n  }\n};\n\nCartComponent = __decorate([Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.scss']\n})], CartComponent);\nexport { CartComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AASlC,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAUxBC,YAAoBC,YAA0B,EAAUC,cAA8B;IAAlE,iBAAY,GAAZD,YAAY;IAAwB,mBAAc,GAAdC,cAAc;IATtE,YAAO,GAAG,IAAI,CAACD,YAAY,CAACE,OAAO;IACnC,aAAQ,GAAY,KAAK;IACzB,oBAAe,GAAY,KAAK,CAAC,CAAC;IAClC,gBAAW,GAAG;MACZC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;KACR;EAEyF;EAE1FC,WAAW,CAACC,SAAiB,EAAEC,EAAU,GACzC;EAEAC,YAAY,CAACC,KAAa,EAAEC,KAAa;IACvC,OAAOD,KAAK,GAAGC,KAAK;EACtB;EAGAC,aAAa,CAACJ,EAAU,GACxB;EAEAK,SAAS;IACP;IACA,OAAO,IAAI,CAACb,YAAY,CAACa,SAAS,EAAE;EACtC;EAEAC,gBAAgB;IACd;IACA;IACA,IAAI,CAACC,eAAe,GAAG,IAAI;EAC7B;EAEAC,iBAAiB;IACf,MAAMC,KAAK,GAAG,IAAI,CAACJ,SAAS,EAAE,CAAC,CAAC;IAEhC;IACA,IAAI,CAACZ,cAAc,CAACiB,iBAAiB,CAAC;MACpC,GAAG,IAAI,CAACC,WAAW;MACnBC,MAAM,EAAEH,KAAK,CAAC;KACf,CAAC,CAACI,SAAS,CAAC;MACXC,IAAI,EAAGC,QAAQ,IAAI;QACjB;QACAC,MAAM,CAACC,IAAI,CAACF,QAAQ,CAACG,WAAW,EAAE,QAAQ,CAAC;QAC3C,IAAI,CAACX,eAAe,GAAG,KAAK,CAAC,CAAC;MAChC,CAAC;;MACDY,KAAK,EAAGA,KAAK,IAAI;QACfC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD;MACF;KACD,CAAC;EACJ;CACD;;AArDY7B,aAAa,eALzBD,SAAS,CAAC;EACTgC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWjC,aAAa,CAqDzB;SArDYA,aAAa","names":["Component","CartComponent","constructor","storeService","paymentService","myCart$","name","email","phone","updateUnits","operation","id","totalProduct","price","units","deleteProduct","totalCart","proceedToPayment","showPaymentForm","submitPaymentInfo","total","createPaymentLink","paymentInfo","amount","subscribe","next","response","window","open","paymentLink","error","console","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\abril\\Desktop\\angular\\appShop\\src\\app\\components\\cart\\cart.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { StoreService } from 'src/app/services/store.service';\nimport { PaymentService } from 'src/app/services/payment.service';\n\n@Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.scss']\n})\nexport class CartComponent {\n  myCart$ = this.storeService.myCart$;\n  viewCart: boolean = false;\n  showPaymentForm: boolean = false; // Nuevo estado para mostrar/ocultar el formulario de pago\n  paymentInfo = { // Objeto para recoger la información del formulario de pago\n    name: '',\n    email: '',\n    phone: ''\n  };\n\n  constructor(private storeService: StoreService, private paymentService: PaymentService) { }\n\n  updateUnits(operation: string, id: string) {\n  }\n\n  totalProduct(price: number, units: number): number {\n    return price * units;\n  }\n  \n\n  deleteProduct(id: string): void {\n  }\n\n  totalCart(): number {\n    // Asumiendo que `this.storeService.totalCart()` calcula el total y siempre retorna un número.\n    return this.storeService.totalCart();\n  }\n\n  proceedToPayment(): void {\n    // Cambio: En lugar de directamente generar el link de pago,\n    // ahora mostramos el formulario de pago para que el usuario pueda introducir información adicional\n    this.showPaymentForm = true;\n  }\n\n  submitPaymentInfo(): void {\n    const total = this.totalCart(); // Obtenemos el total del carrito\n\n    // Aquí, incluimos la información adicional en la solicitud al servicio de pago\n    this.paymentService.createPaymentLink({\n      ...this.paymentInfo, // Desestructuramos paymentInfo para incluir name, email, etc.\n      amount: total // Añadimos el total del carrito\n    }).subscribe({\n      next: (response) => {\n        // Manejar la respuesta, por ejemplo, abriendo el link de pago para el usuario\n        window.open(response.paymentLink, '_blank');\n        this.showPaymentForm = false; // Ocultamos el formulario después de enviar la información\n      },\n      error: (error) => {\n        console.error('Error al crear el link de pago:', error);\n        // Aquí podrías manejar el error, posiblemente mostrando un mensaje al usuario\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}