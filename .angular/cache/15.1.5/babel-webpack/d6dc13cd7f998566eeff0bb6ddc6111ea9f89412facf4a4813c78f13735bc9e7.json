{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class StoreService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = 'https://api.escuelajs.co/api/v1/';\n    //lista carrito\n    this.myList = [];\n    //carrito observable\n    this.myCart = new BehaviorSubject([]);\n    this.myCart$ = this.myCart.asObservable();\n  }\n  getAllProducts() {\n    const response = this.httpClient.get(`${this.baseUrl}products`);\n    // console.log(response);\n    return response;\n  }\n  //con promesa\n  // getPromise(): Promise<any[]> {\n  //   return lastValueFrom(this.httpClient.get<any[]>(`${this.baseUrl}products`))\n  // }\n  //añado producto al carrito\n  addProduct(product) {\n    // debugger;\n    if (this.myList.length === 0) {\n      product.cantidad = 1;\n      this.myList.push(product);\n      //emito la lista para los que estén escuchando\n      this.myCart.next(this.myList);\n    } else {\n      const productMod = this.myList.find(element => {\n        return element.id === product.id;\n      });\n      if (productMod) {\n        productMod.cantidad = productMod.cantidad + 1;\n        this.myCart.next(this.myList);\n      } else {\n        product.cantidad = 1;\n        this.myList.push(product);\n        //ojo hay que emitir la lista!!\n        this.myCart.next(this.myList);\n      }\n    }\n  }\n  findProductById(id) {\n    return this.myList.find(element => {\n      return element.id === id;\n    });\n  }\n  deleteProduct(id) {\n    this.myList = this.myList.filter(product => {\n      return product.id != id;\n    });\n    this.myCart.next(this.myList);\n  }\n  totalCart() {\n    const total = this.myList.reduce(function (acc, product) {\n      return acc + product.cantidad * product.price;\n    }, 0);\n    return total;\n  }\n}\nStoreService.ɵfac = function StoreService_Factory(t) {\n  return new (t || StoreService)(i0.ɵɵinject(i1.HttpClient));\n};\nStoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StoreService,\n  factory: StoreService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAmC,MAAM;;;AAOjE,OAAM,MAAOC,YAAY;EAWvBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAT9B,YAAO,GAAW,kCAAkC;IAEpD;IACQ,WAAM,GAAc,EAAE;IAE9B;IACQ,WAAM,GAAG,IAAIH,eAAe,CAAY,EAAE,CAAC;IACnD,YAAO,GAAG,IAAI,CAACI,MAAM,CAACC,YAAY,EAAE;EAEU;EAE9CC,cAAc;IACZ,MAAMC,QAAQ,GAAG,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAY,GAAG,IAAI,CAACC,OAAO,UAAU,CAAC;IAC1E;IACA,OAAOF,QAAQ;EACjB;EACA;EACA;EACA;EACA;EAEA;EACAG,UAAU,CAACC,OAAgB;IAEzB;IACA,IAAI,IAAI,CAACC,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;MAC5BF,OAAO,CAACG,QAAQ,GAAG,CAAC;MACpB,IAAI,CAACF,MAAM,CAACG,IAAI,CAACJ,OAAO,CAAC;MACzB;MACA,IAAI,CAACP,MAAM,CAACY,IAAI,CAAC,IAAI,CAACJ,MAAM,CAAC;KAE9B,MAAM;MACL,MAAMK,UAAU,GAAG,IAAI,CAACL,MAAM,CAACM,IAAI,CAAEC,OAAO,IAAI;QAC9C,OAAOA,OAAO,CAACC,EAAE,KAAKT,OAAO,CAACS,EAAE;MAClC,CAAC,CAAC;MACF,IAAIH,UAAU,EAAE;QACdA,UAAU,CAACH,QAAQ,GAAGG,UAAU,CAACH,QAAQ,GAAG,CAAC;QAC7C,IAAI,CAACV,MAAM,CAACY,IAAI,CAAC,IAAI,CAACJ,MAAM,CAAC;OAC9B,MAAM;QACLD,OAAO,CAACG,QAAQ,GAAG,CAAC;QACpB,IAAI,CAACF,MAAM,CAACG,IAAI,CAACJ,OAAO,CAAC;QACzB;QACA,IAAI,CAACP,MAAM,CAACY,IAAI,CAAC,IAAI,CAACJ,MAAM,CAAC;;;EAInC;EAEAS,eAAe,CAACD,EAAU;IACxB,OAAO,IAAI,CAACR,MAAM,CAACM,IAAI,CAAEC,OAAO,IAAI;MAClC,OAAOA,OAAO,CAACC,EAAE,KAAKA,EAAE;IAC1B,CAAC,CAAC;EAEJ;EAEAE,aAAa,CAACF,EAAU;IAEtB,IAAI,CAACR,MAAM,GAAG,IAAI,CAACA,MAAM,CAACW,MAAM,CAAEZ,OAAO,IAAI;MAC3C,OAAOA,OAAO,CAACS,EAAE,IAAIA,EAAE;IACzB,CAAC,CAAC;IACF,IAAI,CAAChB,MAAM,CAACY,IAAI,CAAC,IAAI,CAACJ,MAAM,CAAC;EAG/B;EACAY,SAAS;IACP,MAAMC,KAAK,GAAG,IAAI,CAACb,MAAM,CAACc,MAAM,CAAC,UAAUC,GAAG,EAAEhB,OAAO;MAAI,OAAOgB,GAAG,GAAIhB,OAAO,CAACG,QAAQ,GAAGH,OAAO,CAACiB,KAAM;IAAE,CAAC,EAAE,CAAC,CAAC;IACjH,OAAOH,KAAK;EACd;;AArEWxB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA4B,SAAZ5B,YAAY;EAAA6B,YAFX;AAAM","names":["BehaviorSubject","StoreService","constructor","httpClient","myCart","asObservable","getAllProducts","response","get","baseUrl","addProduct","product","myList","length","cantidad","push","next","productMod","find","element","id","findProductById","deleteProduct","filter","totalCart","total","reduce","acc","price","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\abril\\Desktop\\angular\\appShop\\src\\app\\services\\store.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, lastValueFrom } from 'rxjs';\nimport { Product } from '../interfaces/product.interface';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  baseUrl: string = 'https://api.escuelajs.co/api/v1/';\n\n  //lista carrito\n  private myList: Product[] = [];\n\n  //carrito observable\n  private myCart = new BehaviorSubject<Product[]>([]);\n  myCart$ = this.myCart.asObservable();\n\n  constructor(private httpClient: HttpClient) { }\n\n  getAllProducts(): Observable<Product[]> {\n    const response = this.httpClient.get<Product[]>(`${this.baseUrl}products`);\n    // console.log(response);\n    return response\n  }\n  //con promesa\n  // getPromise(): Promise<any[]> {\n  //   return lastValueFrom(this.httpClient.get<any[]>(`${this.baseUrl}products`))\n  // }\n\n  //añado producto al carrito\n  addProduct(product: Product) {\n\n    // debugger;\n    if (this.myList.length === 0) {\n      product.cantidad = 1;\n      this.myList.push(product);\n      //emito la lista para los que estén escuchando\n      this.myCart.next(this.myList);\n\n    } else {\n      const productMod = this.myList.find((element) => {\n        return element.id === product.id\n      })\n      if (productMod) {\n        productMod.cantidad = productMod.cantidad + 1;\n        this.myCart.next(this.myList);\n      } else {\n        product.cantidad = 1;\n        this.myList.push(product);\n        //ojo hay que emitir la lista!!\n        this.myCart.next(this.myList);\n      }\n\n    }\n  }\n\n  findProductById(id: string) {\n    return this.myList.find((element) => {\n      return element.id === id\n    })\n\n  }\n\n  deleteProduct(id: string) {\n\n    this.myList = this.myList.filter((product) => {\n      return product.id != id\n    })\n    this.myCart.next(this.myList);\n\n\n  }\n  totalCart() {\n    const total = this.myList.reduce(function (acc, product) { return acc + (product.cantidad * product.price); }, 0)\n    return total\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}